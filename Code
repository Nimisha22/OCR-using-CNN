import keras

data = mnist.load_data()
(train_images, train_labels), (test_images, test_labels) = data

len(train_images)
Ans : 60000

len(test_images)
Ans : 10000

train_images = train_images.reshape((60000, 28, 28, 1))

test_images = test_images.reshape((10000, 28, 28, 1))

train_images = train_images.astype('float')/255 #normalization

test_images = test_images.astype('float')/255 #normalization

from keras.preprocessing import image
import matplotlib.pyplot as plt

plt.imshow(image.array_to_img(train_images[20]), cmap="gray")

train_labels[20]
Ans : 4

#lable = 4
0 0 0 0 1 0 0 0 0 0

from keras.utils import to_categorical
train_labels_original = train_labels
train_labels = to_categorical(train_labels)

train_labels[20]
Ans : array([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.], dtype=float32)

test_labels_original = test_labels
test_labels = to_categorical(test_labels)

test_labels_original[7]
Ans : 9

test_labels[7]
Ans : array([0., 0., 0., 0., 0., 0., 0., 0., 0., 1.], dtype=float32)


from keras import layers, models
model = models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape = (28,28,1)))
model.summary()
Ans :
Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 26, 26, 32)        320       
=================================================================
Total params: 320
Trainable params: 320
Non-trainable params: 0
_________________________________________________________________


model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation = 'relu'))
model.summary()
Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 26, 26, 32)        320       
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 11, 11, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         
=================================================================
Total params: 18,816
Trainable params: 18,816
Non-trainable params: 0
_________________________________________________________________


model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.summary()
Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 26, 26, 32)        320       
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 11, 11, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 3, 3, 64)          36928     
=================================================================
Total params: 55,744
Trainable params: 55,744
Non-trainable params: 0
_________________________________________________________________


model.add(layers.Flatten())
model.summary()
Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 26, 26, 32)        320       
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 11, 11, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 3, 3, 64)          36928     
_________________________________________________________________
flatten_1 (Flatten)          (None, 576)               0         
=================================================================
Total params: 55,744
Trainable params: 55,744
Non-trainable params: 0
_________________________________________________________________


model.add(layers.Dense(64, activation = 'relu'))
model.add(layers.Dense(10, activation='softmax'))
model.summary()
Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 26, 26, 32)        320       
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 11, 11, 64)        18496     
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 3, 3, 64)          36928     
_________________________________________________________________
flatten_1 (Flatten)          (None, 576)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 64)                36928     
_________________________________________________________________
dense_2 (Dense)              (None, 10)                650       
=================================================================
Total params: 93,322
Trainable params: 93,322
Non-trainable params: 0
_________________________________________________________________


model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
model.fit(train_images, train_labels, epochs = 100, batch_size=64)
Epoch 1/100
60000/60000 [==============================] - 11s 184us/step - loss: 0.1810 - accuracy: 0.9428
Epoch 2/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0494 - accuracy: 0.9847
Epoch 3/100
60000/60000 [==============================] - 4s 69us/step - loss: 0.0339 - accuracy: 0.9893
Epoch 4/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0260 - accuracy: 0.9918
Epoch 5/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0204 - accuracy: 0.9938
Epoch 6/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0171 - accuracy: 0.9946
Epoch 7/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0131 - accuracy: 0.9959
Epoch 8/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0107 - accuracy: 0.9968
Epoch 9/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0097 - accuracy: 0.9971
Epoch 10/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0087 - accuracy: 0.9976
Epoch 11/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0076 - accuracy: 0.9977
Epoch 12/100
60000/60000 [==============================] - 4s 69us/step - loss: 0.0066 - accuracy: 0.9982
Epoch 13/100
60000/60000 [==============================] - 4s 69us/step - loss: 0.0058 - accuracy: 0.9983
Epoch 14/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0061 - accuracy: 0.9982
Epoch 15/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0052 - accuracy: 0.9984
Epoch 16/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0038 - accuracy: 0.9987
Epoch 17/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0043 - accuracy: 0.9988
Epoch 18/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0036 - accuracy: 0.9989
Epoch 19/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0042 - accuracy: 0.9989
Epoch 20/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0033 - accuracy: 0.9991
Epoch 21/100
60000/60000 [==============================] - 4s 61us/step - loss: 0.0034 - accuracy: 0.9992
Epoch 22/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0024 - accuracy: 0.9992
Epoch 23/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0028 - accuracy: 0.9992
Epoch 24/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0029 - accuracy: 0.9992
Epoch 25/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0027 - accuracy: 0.9994
Epoch 26/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0036 - accuracy: 0.9991
Epoch 27/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0026 - accuracy: 0.9994
Epoch 28/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0022 - accuracy: 0.9994
Epoch 29/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0021 - accuracy: 0.9996
Epoch 30/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0035 - accuracy: 0.9993
Epoch 31/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0018 - accuracy: 0.9995
Epoch 32/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0023 - accuracy: 0.9995
Epoch 33/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0022 - accuracy: 0.9995
Epoch 34/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0020 - accuracy: 0.9996
Epoch 35/100
60000/60000 [==============================] - 4s 62us/step - loss: 0.0022 - accuracy: 0.9995
Epoch 36/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0020 - accuracy: 0.9995
Epoch 37/100
60000/60000 [==============================] - 4s 69us/step - loss: 0.0024 - accuracy: 0.9994
Epoch 38/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0019 - accuracy: 0.9995
Epoch 39/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0027 - accuracy: 0.9994
Epoch 40/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0018 - accuracy: 0.9996
Epoch 41/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0016 - accuracy: 0.9997
Epoch 42/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0022 - accuracy: 0.9996
Epoch 43/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0011 - accuracy: 0.9997
Epoch 44/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0017 - accuracy: 0.9996
Epoch 45/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0016 - accuracy: 0.9998
Epoch 46/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0025 - accuracy: 0.9995
Epoch 47/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0013 - accuracy: 0.9998
Epoch 48/100
60000/60000 [==============================] - 4s 69us/step - loss: 0.0023 - accuracy: 0.9997
Epoch 49/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0014 - accuracy: 0.9997
Epoch 50/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0016 - accuracy: 0.9997
Epoch 51/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0016 - accuracy: 0.9998
Epoch 52/100
60000/60000 [==============================] - 4s 62us/step - loss: 0.0021 - accuracy: 0.9995
Epoch 53/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0011 - accuracy: 0.9998
Epoch 54/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0014 - accuracy: 0.9997
Epoch 55/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0024 - accuracy: 0.9995
Epoch 56/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0020 - accuracy: 0.9996
Epoch 57/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0018 - accuracy: 0.9997
Epoch 58/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0012 - accuracy: 0.9997
Epoch 59/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0018 - accuracy: 0.9997
Epoch 60/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0013 - accuracy: 0.9998
Epoch 61/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0015 - accuracy: 0.9997
Epoch 62/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0017 - accuracy: 0.9998
Epoch 63/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0012 - accuracy: 0.9998
Epoch 64/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0016 - accuracy: 0.9997
Epoch 65/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0016 - accuracy: 0.9998
Epoch 66/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0019 - accuracy: 0.9997
Epoch 67/100
60000/60000 [==============================] - 4s 67us/step - loss: 0.0012 - accuracy: 0.9998
Epoch 68/100
60000/60000 [==============================] - 4s 68us/step - loss: 5.9466e-04 - accuracy: 0.9998
Epoch 69/100
60000/60000 [==============================] - 4s 64us/step - loss: 3.0291e-04 - accuracy: 0.9999
Epoch 70/100
60000/60000 [==============================] - 4s 62us/step - loss: 0.0012 - accuracy: 0.9998
Epoch 71/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0015 - accuracy: 0.9998
Epoch 72/100
60000/60000 [==============================] - 4s 63us/step - loss: 2.0482e-04 - accuracy: 1.0000
Epoch 73/100
60000/60000 [==============================] - 4s 64us/step - loss: 6.9204e-04 - accuracy: 0.9998
Epoch 74/100
60000/60000 [==============================] - 4s 65us/step - loss: 0.0012 - accuracy: 0.9999
Epoch 75/100
60000/60000 [==============================] - 4s 65us/step - loss: 7.9820e-04 - accuracy: 0.9998
Epoch 76/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0011 - accuracy: 0.9998
Epoch 77/100
60000/60000 [==============================] - 4s 69us/step - loss: 0.0016 - accuracy: 0.9998
Epoch 78/100
60000/60000 [==============================] - 4s 65us/step - loss: 5.4654e-04 - accuracy: 0.9999
Epoch 79/100
60000/60000 [==============================] - 4s 68us/step - loss: 7.8302e-04 - accuracy: 0.9998
Epoch 80/100
60000/60000 [==============================] - 4s 62us/step - loss: 6.0244e-04 - accuracy: 0.9998
Epoch 81/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0010 - accuracy: 0.9999
Epoch 82/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0019 - accuracy: 0.9997
Epoch 83/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0021 - accuracy: 0.9997
Epoch 84/100
60000/60000 [==============================] - 4s 66us/step - loss: 0.0021 - accuracy: 0.9998
Epoch 85/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0024 - accuracy: 0.9998
Epoch 86/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0010 - accuracy: 0.9999
Epoch 87/100
60000/60000 [==============================] - 4s 64us/step - loss: 0.0022 - accuracy: 0.9998
Epoch 88/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0011 - accuracy: 0.9998
Epoch 89/100
60000/60000 [==============================] - 4s 64us/step - loss: 7.1154e-04 - accuracy: 0.9999
Epoch 90/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0019 - accuracy: 0.9998
Epoch 91/100
60000/60000 [==============================] - 4s 67us/step - loss: 7.5411e-04 - accuracy: 0.9998
Epoch 92/100
60000/60000 [==============================] - 4s 70us/step - loss: 2.9110e-04 - accuracy: 0.9999
Epoch 93/100
60000/60000 [==============================] - 4s 68us/step - loss: 0.0017 - accuracy: 0.9998
Epoch 94/100
60000/60000 [==============================] - 4s 64us/step - loss: 4.6476e-04 - accuracy: 0.9999
Epoch 95/100
60000/60000 [==============================] - 4s 66us/step - loss: 8.6592e-04 - accuracy: 0.9999
Epoch 96/100
60000/60000 [==============================] - 4s 63us/step - loss: 0.0011 - accuracy: 0.9999
Epoch 97/100
60000/60000 [==============================] - 4s 64us/step - loss: 6.0041e-04 - accuracy: 0.9999
Epoch 98/100
60000/60000 [==============================] - 4s 66us/step - loss: 9.0160e-04 - accuracy: 0.9998
Epoch 99/100
60000/60000 [==============================] - 4s 62us/step - loss: 7.1299e-04 - accuracy: 0.9999
Epoch 100/100
60000/60000 [==============================] - 4s 63us/step - loss: 5.1560e-04 - accuracy: 0.9999
<keras.callbacks.callbacks.History at 0x7f0d802686a0>


test_loss, test_accuracy = model.evaluate(test_images, test_labels)
Ans : 10000/10000 [==============================] - 1s 74us/step

test_accuracy
Ans : 0.9932000041007996

predictions = model.predict_classes(test_images)
plt.imshow(image.array_to_img(test_images[11]), cmap="gray")
Ans : <matplotlib.image.AxesImage at 0x7f0d36043320>

predictions[11]
6   # the image was of digit 6!

#https://colab.research.google.com/drive/14XLrloNY_kVAeaiIhRNA-8CbOHtpUmG6?usp=sharing#scrollTo=RJ_KLVOg0mj8
# https://colab.research.google.com/drive/15W_AJCB_IUlPbLZpJJtE4sBZQL4gAK0s?usp=sharing#scrollTo=Fsf3b6xtRSrm

